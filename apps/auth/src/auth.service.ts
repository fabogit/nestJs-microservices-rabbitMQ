import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { JwtService } from '@nestjs/jwt';
import { Response } from 'express';
import { User } from './users/models/user.schema';

/**
 * Interface defining the payload structure for JWT tokens.
 * This payload is embedded within JWTs generated by the `AuthService` and contains essential user identification information.
 */
export interface TokenPayload {
  /**
   * The unique identifier of the user.
   * This ID is typically a string representation of a MongoDB ObjectId.
   */
  userId: string;
}

/**
 * Injectable service for handling authentication-related operations.
 * This service is responsible for user login, JWT token generation, setting authentication cookies, and logout functionalities.
 * It leverages the `JwtService` for JWT operations and `ConfigService` for retrieving configuration values like JWT expiration time.
 */
@Injectable()
export class AuthService {
  /**
   * Constructor for AuthService.
   * @param {ConfigService} configService - Injected `ConfigService` instance.
   *        Used to access application configuration, such as JWT expiration time.
   * @param {JwtService} jwtService - Injected `JwtService` instance.
   *        Provides functionalities for signing and verifying JWT tokens.
   */
  constructor(
    private readonly configService: ConfigService,
    private readonly jwtService: JwtService,
  ) {}

  /**
   * Handles user login, generates a JWT, and sets it as an HTTP-only cookie in the `response`.
   * @async
   * @param {User} user - The User object representing the logged-in user. User details are extracted from this object to form the token payload.
   * @param {Response} response - The Express `Response` object, used to set the authentication cookie in the HTTP response.
   * @returns {Promise<void>} A Promise that resolves after successfully logging in the user and setting the authentication cookie.
   */
  async login(user: User, response: Response): Promise<void> {
    // Define the payload to be included in the JWT token.
    const tokenPayload: TokenPayload = {
      // Extracts the user's ObjectId and converts it to a hexadecimal string for use in the token.
      userId: user._id.toHexString(),
    };

    // Calculate the expiration date for the JWT token.
    const expirationDate = new Date();
    expirationDate.setSeconds(
      // Adds the JWT expiration time (in seconds) from the configuration to the current time.
      expirationDate.getSeconds() + this.configService.get('JWT_EXPIRATION'),
    );

    // Sign the token payload to create a JWT.
    const token = this.jwtService.sign(tokenPayload);

    // Set the JWT as an HTTP-only cookie in the response.
    response.cookie('Authentication', token, {
      // Marks the cookie as HTTP-only, preventing client-side JavaScript access for security.
      httpOnly: true,
      // Sets the expiration date of the cookie to match the JWT expiration.
      expires: expirationDate,
    });
  }

  /**
   * Handles user logout by clearing the authentication cookie.
   * This method invalidates the current authentication session by setting the 'Authentication' cookie to an empty string and expiring it immediately.
   * @param {Response} response - The Express `Response` object, used to clear the authentication cookie.
   * @returns {void}
   */
  logout(response: Response): void {
    // Clear the 'Authentication' cookie by setting its value to an empty string and immediately expiring it.
    response.cookie('Authentication', '', {
      // Keep httpOnly flag for consistency, though it's not strictly necessary for deletion.
      httpOnly: true,
      // Set expiration date to now, effectively deleting the cookie.
      expires: new Date(),
    });
  }
}
